#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        MOV.W   #0x0A30,R15
        MOV.W   #90,0(R15)               
        MOV.W   #80,2(R15)               
        MOV.W   #70,4(R15)
        MOV.W   #90,6(R15)
        MOV.W   #10,8(R15)       
        MOV.W   #10,R14
        
        CALL    #Avalia_Ordem_Dec
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)


Avalia_Ordem_Dec:       CLR.W R13          ;R13=i=0
Loop_Ordem:             MOV.W R13,R12
                        ADD.W #2,R12       ;R12=i+2=temporario
                        CMP R14,R13             
                        JGE Fim_Varredura
                        PUSH R13
                        ADD.W R15,R13
                        ADD.W R15,R12
                        CMP 0(R12),0(R13) ;vetor[i] < vetor[i+1]?
                        JL Desordem
                        POP R13
                        ADD #2,R13
                        JMP Loop_Ordem                        
Fim_Varredura:          MOV.W #1,R15             
                        RET
Desordem:               CLR.W R15
                        RET
                        
                        END
