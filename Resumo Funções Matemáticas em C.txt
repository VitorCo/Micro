---------------------------------------------------------------------
Resumo de Funções Matemáticas em C
--------------------------------------------------------------------
float Raiz_Quadrada(float S){
	int n = 0;
	float x = S/2;

	while(n<10){
	x = (x + S/x)/2;
	n++;
	}
	return x;
	}
------------------------------------------------------------------
int Mult(int a, int b){
    int mult=0;
    if(b==0)
    return 0;
    else{
        while(b>0){
        mult = mult + a;
        b--;
        }
    }
return mult;
}
---------------------------------------------------------------------
int Potencia(int x, int N){
	int i=1;
	int result = x;

	if(N==0)
	return 1;
	else if(N==1)
    return x;
	else{
		while(i<N){
		result = Mult(result,x);
		i++;
		}
	 }
	 return result;
	}
----------------------------------------------------------------------
int Divisao(int a, int b){
int i=0;
while(a>=b){
	a = a - b;
	i++;
	}
return i;
}
---------------------------------------------------------------------
int Primalidade(unsigned int a){
int i = 1;
int cont = 0;
int resto;
while(i<=a){
    resto = Resto(a,i);
    if(resto==0){;
    cont++;}
    i++;
    }
  if(cont == 2)
    return 1;
  else
    return 0;
}
-----------------------------------------------------------------------
int Resto(int a, int b){
while(a>=b){
    a = a - b;
    }
return a;
}
-----------------------------------------------------------------------
unsigned long long DuploFatorial(unsigned long long n){

    if(n==0){
        return 1;
    }
int i=n-2;
int resto = Resto(n,2);

    if(resto == 0){
        while(i>1){
            n = Mult(n,i);
            i = i - 2;}
    }else{
        while(i>0){
            n = Mult(n,i);
            i = i - 2;
        }
    }
 return n;
}
---------------------------------------------------------------------------
double ExpTaylor(double x){

int N = 0;
double soma=0;
double numerador;
float denominador;
double div;
while(N<=20){
   //soma = soma + (Potencia(x,N)/Fatorial(N));
   numerador = Potencia(x,N);
   printf("%lf\n", numerador);
   denominador = Fatorial(N);
   printf("%f\n", denominador);
   soma = soma + (numerador/denominador);
   //div = Divisao(numerador,denominador);
   //soma = soma + div;
   N++;
}
return soma;
}
-------------------------------------------------------------------------------
unsigned long long Fatorial(unsigned long long n){

int i;
i=(n-1);
if(n==0){
    return 1;
}else{
    while(i>0){
        n = Mult(n,i);
        i--;
        }
    }
 return n;
}
----------------------------------------------------------------------------------
int Palindromo(int *p,int tamanho)
{
	int i;
	for(i=0;i<tamanho;i++)
	{
		if(p[i]!=p[(tamanho-1)-i])
		{
			return 0;
		}
	}
	return 1;
}

void main()
{
	int vetor[5],i;
	for(i=0;i<5;i++)
	{
		scanf("%d",&vetor[i]);
	}

	if(Palindromo(vetor,5))
	{
		printf("O vetor inserido e' palindromo.\n");
	}
	else
	{
		printf("O vetor inserido nao e' palindromo.\n");
	}
}
---------------------------------------------------------------------------
#include<stdio.h>

int DIV_signed(int a, int b)
{
	if(a<0 && b<0)
	{
		a = -a;
		b = -b;
		return Unsigned_Div(a,b);
	}
	else if (a<0 && b>0)
	{
		a = -a;
		return -(Unsigned_Div(a,b));
	}
	else if (a>0 && b<0)
	{
		b = -b;
		return -(Unsigned_Div(a,b));
	}
	else
	{
		return Unsigned_Div(a,b);
	}

}

int Unsigned_Div(int dividendo,int divisor)
{
	if(dividendo >= divisor)
	{
		dividendo -= divisor;
		return (1 + Unsigned_Div(dividendo,divisor));
	}
	else
		return 0;
}

void main()
{
	int a,b,c;
	scanf("%d %d",&a,&b);
	c = DIV_signed(a,b);
	printf("A divisao de %d por %d e' %d.\n",a,b,c);
}
---------------------------------------------------------------------------------------
int MULT_signed(int a, int b)
{
	if(a<0 && b<0)
	{
		a = -a;
		b = -b;
		return MULT_unsigned(a,b);
	}
	else if (a<0 && b>0)
	{
		a = -a;
		return -(MULT_unsigned(a,b));
	}
	else if (a>0 && b<0)
	{
		b = -b;
		return -(MULT_unsigned(a,b));
	}
	else
	{
		return MULT_unsigned(a,b);
	}

}

int MULT_unsigned(unsigned int a, unsigned int b)
{
if(b==0) return 0;
else
return a+MULT_unsigned(a, (b-1));
}

int Potencia(int x, int N)
{
	if(N==0) return 1;
	else return MULT_signed(x,Potencia(x, (N-1)));
}
